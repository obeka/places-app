{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","type","id","display","accept","ref","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","password","formState","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/6.bfba607b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  const pickedHandler = (e) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        ref={filePickerRef}\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport \"./Auth.css\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/utils/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nfunction Auth() {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const authSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value); // in the backend, fileUpload.single looks for the 'image' key\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\r\n          \"POST\",\r\n          formData\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: { value: \"\", isValid: false },\r\n          image: { value: null, isValid: false },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              label=\"Your Name\"\r\n              type=\"text\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please Enter a Name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload id=\"image\" center onInput={inputHandler} errorText='Please provide an image.'/>\r\n          )}{\" \"}\r\n          {/* Same onInput function with other inputs */}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"E-mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            element=\"input\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}