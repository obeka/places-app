{"version":3,"sources":["shared/components/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","auth","useContext","AuthContext","placeId","useParams","useHttpClient","isLoading","error","sendRequest","clearError","useState","editedPlace","setEditedPlace","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","e","preventDefault","JSON","stringify","inputs","creator","userId","Authorization","token","push","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","disabled"],"mappings":"iGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,6NC+HEC,UAxHf,WACE,IAAMC,EAAOC,qBAAWC,KAClBC,EAAUC,cAAYD,QAFP,EAGiCE,cAA9CC,EAHa,EAGbA,UAAWC,EAHE,EAGFA,MAAOC,EAHL,EAGKA,YAAaC,EAHlB,EAGkBA,WAHlB,EAIiBC,qBAJjB,mBAIdC,EAJc,KAIDC,EAJC,KAKfC,EAAUC,cALK,EAO0BC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAlBmB,mBAOdE,EAPc,KAOHC,EAPG,KAOWC,EAPX,KAqBrBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYhB,EAAY,GAAD,OACjCiB,6CADiC,mBACWtB,IAHlC,OAETuB,EAFS,OAKfd,EAAec,EAAaC,OAC5BL,EACE,CACEN,MAAO,CACLC,MAAOS,EAAaC,MAAMX,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAaC,MAAMR,YAC1BD,SAAS,KAGb,GAjBa,yGAAH,qDAqBhBU,KACC,CAACpB,EAAaL,EAASmB,IAE1B,IAAMO,EAAwB,uCAAG,WAAOC,GAAP,SAAAN,EAAA,6DAC/BM,EAAEC,iBAD6B,kBAGvBvB,EAAY,GAAD,OACZiB,6CADY,mBACgCtB,GAC/C,QACA6B,KAAKC,UAAU,CACbjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,MAC1CkB,QAASnC,EAAKoC,SAEhB,CACE,eAAgB,mBAChBC,cAAe,UAAYrC,EAAKsC,QAbP,OAiB7BzB,EAAQ0B,KAAR,WAAiBvC,EAAKoC,OAAtB,YAjB6B,uGAAH,sDAqB9B,OAAI9B,EAEA,yBAAKV,UAAU,UACb,kBAAC,IAAD,OAKDe,GAAgBJ,EAWnB,kBAAC,IAAMiC,SAAP,KACE,kBAAC,IAAD,CAAYjC,MAAOA,EAAOkC,QAAShC,KACjCH,GAAaK,GACb,0BAAMf,UAAU,aAAa8C,SAAUb,GACrC,kBAAC,IAAD,CACEc,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS7B,EACT8B,aAAcxC,EAAYK,MAC1BoC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACC,eACbC,UAAU,uDACVC,QAAS7B,EACT8B,aAAcxC,EAAYQ,YAC1BiC,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASQ,UAAWjC,EAAUF,SAA3C,kBAlCJ,yBAAKtB,UAAU,UACb,kBAAC,IAAD,KACE","file":"static/js/8.d1e9b2ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport { VALIDATOR_REQUIRE } from \"../../shared/utils/validators\";\r\nimport \"./PlaceForm.css\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nfunction UpdatePlace() {\r\n  const auth = useContext(AuthContext);\r\n  const placeId = useParams().placeId;\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [editedPlace, setEditedPlace] = useState();\r\n  const history = useHistory();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\r\n        );\r\n        setEditedPlace(responseData.place);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.place.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.place.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n          creator: auth.userId,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      //Redirect user to different page\r\n      history.push(`/${auth.userId}/places`);\r\n    } catch (err) {}\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!editedPlace && !error) {\r\n    return (\r\n      <div className=\"center\">\r\n        <Card>\r\n          <h2>Could not find the place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {!isLoading && editedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            element=\"input\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid title.\"\r\n            onInput={inputHandler}\r\n            initialValue={editedPlace.title}\r\n            initialValid={true}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            element=\"textarea\"\r\n            label=\"Description\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            errorText=\"Please enter a valid description (min 5 characters).\"\r\n            onInput={inputHandler}\r\n            initialValue={editedPlace.description}\r\n            initialValid={true}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UpdatePlace;\r\n"],"sourceRoot":""}