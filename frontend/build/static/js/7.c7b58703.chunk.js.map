{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","type","id","style","display","accept","ref","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","history","useHistory","useForm","title","value","description","address","image","formState","inputHandler","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","Fragment","onClear","onSubmit","asOverlay","label","element","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/7.c7b58703.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  const pickedHandler = (e) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        ref={filePickerRef}\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH,\r\n} from \"../../shared/utils/validators\";\r\nimport \"./PlaceForm.css\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nfunction NewPlace() {\r\n  const auth = useContext(AuthContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const history = useHistory();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const placeSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", formState.inputs.title.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"address\", formState.inputs.address.value);\r\n      formData.append(\"creator\", auth.userId);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n\r\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places`, \"POST\", formData, {\r\n        Authorization: 'Bearer ' + auth.token\r\n      });\r\n      //Redirect user to different page\r\n      history.push(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          element=\"input\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title\"\r\n          onInput={inputHandler}\r\n        />\r\n\r\n        <Input\r\n          id=\"description\"\r\n          type=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter a valid description (at least 5 characters).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          type=\"input\"\r\n          label=\"Address\"\r\n          element=\"input\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid address.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          center\r\n          onInput={inputHandler}\r\n          errorText=\"Please provide an image.\"\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          ADD PLACE\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NewPlace;\r\n"],"sourceRoot":""}